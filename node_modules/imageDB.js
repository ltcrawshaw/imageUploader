var mysql = require('mysql');

var pool = mysql.createPool({
    connectionLimit: 100,
    host: 'localhost',
    user: 'images',
    password: 'images',
    database: 'images',
    debug: false
});

module.exports.uploadFile = function(image, callback) {
    pool.getConnection(function(err, connection){
       function releaseConnection() {
           connection.removeListener('error', errListener);
           connection.release();
       
        } 
        
        function errListener(err) {
            releaseConnection();
            callback({ error: "Error: Couldn't get connection."});
        }
        
        if(err) {
            callback({ error: "Error: Couldn't get connection."});
            return;
        } else {
            console.log(image);    
            
            connection.on('error', errListener);
            connection.query(
             'INSERT INTO imagedata VALUES (NUL, ?): ',
             [image.data], 
             function(err, result) {
                if(err) {
                    errListener(err)
                } else {
                    connection.on('error', errListener);
                    connection.query(
                        'INSERT INTO metadata '
                        + 'VALUES (?, DEFAULT, ?, ?, ?); ', [
                            image.name, 
                            image.type, 
                            image.size, 
                            result.insertId  
                        ],  function(err, result) {
                            if(err) {
                                errListener(err);
                            }  else {
                                connection.query( function(err, result) {
                                    if(err) {
                                       errListener(err); 
                                    } else {
                                releaseConnection();
                                callback({ id: result.insertId });
                                }
                            });        
                        }
                    });
                }
            });
        }
    });
};

module.exports.fetchImage = function(id, callback) {
    pool.getConnection(function(err, connection){
       function releaseConnection() {
           connection.removeListener('error', errListener);
           connection.release();
       
        } 
        
        function errListener(err) {
            releaseConnection();
            callback({ error: "Error: Couldn't get connection."});
        }
        
        if(err) {
            callback({ error: "Error: Couldn't get connection."});
            return;
        } else {
            connection.on('error', errListener);
            connection.query(
                'SELECT type, size, data '
            + 'FROM metadata '
            + 'JOIN imagedata '
            + 'ON id = imageid '
            + 'WHERE id = ?;',[id], function(err, rows, fields) {
                if(err) {
                    errListener(err)
                } else {
                    releaseConnection();
                    callback(rows[0]);
                }
            })
        }
    });
};

module.exports.listImages = function(callback) {
    pool.getConnection(function(err, connection){
       function releaseConnection() {
           connection.removeListener('error', errListener);
           connection.release();
       } 
        
        function errListener(err) {
            releaseConnection();
            callback({ error: "Error: Couldn't get connection."});
        }
        
        if(err) {
            callback({ error: "Error: Couldn't get connection."});
            return;
        } else {
            connection.on('error', errListener);
            connection.query("SELECT name, imageid FROM metadata ORDER BY created DESC;", function (err, rows, fields) {
                if(err) {
                    errListener(err)
                } else {
                    releaseConnection();
                    callback(rows);
                }
            })
        }
    });
};

